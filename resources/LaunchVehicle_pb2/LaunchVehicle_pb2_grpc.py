# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from resources.LaunchVehicle_pb2 import LaunchVehicle_pb2 as LaunchVehicle__pb2


class LaunchVehicleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VehicleLaunch = channel.unary_stream(
                '/LaunchVehicleService/VehicleLaunch',
                request_serializer=LaunchVehicle__pb2.VehicleRequest.SerializeToString,
                response_deserializer=LaunchVehicle__pb2.VehicleLaunchResponse.FromString,
                )
        self.DeployPayload = channel.unary_unary(
                '/LaunchVehicleService/DeployPayload',
                request_serializer=LaunchVehicle__pb2.VehicleRequest.SerializeToString,
                response_deserializer=LaunchVehicle__pb2.DeployPayloadResponse.FromString,
                )
        self.Deorbit = channel.unary_unary(
                '/LaunchVehicleService/Deorbit',
                request_serializer=LaunchVehicle__pb2.VehicleRequest.SerializeToString,
                response_deserializer=LaunchVehicle__pb2.DeorbitResponse.FromString,
                )
        self.VehicleStartTelemetry = channel.unary_stream(
                '/LaunchVehicleService/VehicleStartTelemetry',
                request_serializer=LaunchVehicle__pb2.VehicleRequest.SerializeToString,
                response_deserializer=LaunchVehicle__pb2.VehicleStartTelemetryResponse.FromString,
                )
        self.VehicleStopTelemetry = channel.unary_unary(
                '/LaunchVehicleService/VehicleStopTelemetry',
                request_serializer=LaunchVehicle__pb2.VehicleRequest.SerializeToString,
                response_deserializer=LaunchVehicle__pb2.VehicleStopTelemetryResponse.FromString,
                )


class LaunchVehicleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VehicleLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployPayload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deorbit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VehicleStartTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VehicleStopTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchVehicleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VehicleLaunch': grpc.unary_stream_rpc_method_handler(
                    servicer.VehicleLaunch,
                    request_deserializer=LaunchVehicle__pb2.VehicleRequest.FromString,
                    response_serializer=LaunchVehicle__pb2.VehicleLaunchResponse.SerializeToString,
            ),
            'DeployPayload': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployPayload,
                    request_deserializer=LaunchVehicle__pb2.VehicleRequest.FromString,
                    response_serializer=LaunchVehicle__pb2.DeployPayloadResponse.SerializeToString,
            ),
            'Deorbit': grpc.unary_unary_rpc_method_handler(
                    servicer.Deorbit,
                    request_deserializer=LaunchVehicle__pb2.VehicleRequest.FromString,
                    response_serializer=LaunchVehicle__pb2.DeorbitResponse.SerializeToString,
            ),
            'VehicleStartTelemetry': grpc.unary_stream_rpc_method_handler(
                    servicer.VehicleStartTelemetry,
                    request_deserializer=LaunchVehicle__pb2.VehicleRequest.FromString,
                    response_serializer=LaunchVehicle__pb2.VehicleStartTelemetryResponse.SerializeToString,
            ),
            'VehicleStopTelemetry': grpc.unary_unary_rpc_method_handler(
                    servicer.VehicleStopTelemetry,
                    request_deserializer=LaunchVehicle__pb2.VehicleRequest.FromString,
                    response_serializer=LaunchVehicle__pb2.VehicleStopTelemetryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LaunchVehicleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LaunchVehicleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VehicleLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/LaunchVehicleService/VehicleLaunch',
            LaunchVehicle__pb2.VehicleRequest.SerializeToString,
            LaunchVehicle__pb2.VehicleLaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeployPayload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LaunchVehicleService/DeployPayload',
            LaunchVehicle__pb2.VehicleRequest.SerializeToString,
            LaunchVehicle__pb2.DeployPayloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deorbit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LaunchVehicleService/Deorbit',
            LaunchVehicle__pb2.VehicleRequest.SerializeToString,
            LaunchVehicle__pb2.DeorbitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VehicleStartTelemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/LaunchVehicleService/VehicleStartTelemetry',
            LaunchVehicle__pb2.VehicleRequest.SerializeToString,
            LaunchVehicle__pb2.VehicleStartTelemetryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VehicleStopTelemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LaunchVehicleService/VehicleStopTelemetry',
            LaunchVehicle__pb2.VehicleRequest.SerializeToString,
            LaunchVehicle__pb2.VehicleStopTelemetryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
